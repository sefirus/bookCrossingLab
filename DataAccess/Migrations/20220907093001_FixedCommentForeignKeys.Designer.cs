// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BookCrossingContext))]
    [Migration("20220907093001_FixedCommentForeignKeys")]
    partial class FixedCommentForeignKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BookCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentShelfId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentUserId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CurrentShelfId");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("BookCopies", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BookWriter", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "WriterId");

                    b.HasIndex("WriterId");

                    b.ToTable("BookWriters", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = ""
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Magazines",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Fiction",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Non-Fiction",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Handbooks",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Uncategorized",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Detective",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Prose",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Sci-Fi",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "Fantasy",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            Name = "Horrors",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            Name = "Poetry",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            Name = "Drama",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            Name = "Historical Novels",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            Name = "Esotericism",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            Name = "Business",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            Name = "Social",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 18,
                            Description = "",
                            Name = "Biographies",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 19,
                            Description = "",
                            Name = "Economics",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 20,
                            Description = "",
                            Name = "Technical literature",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 21,
                            Description = "",
                            Name = "Science",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 22,
                            Description = "",
                            Name = "Philosophy",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 23,
                            Description = "",
                            Name = "Motivational literature",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 24,
                            Description = "",
                            Name = "Religion",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 25,
                            Description = "",
                            Name = "Self Development",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 26,
                            Description = "",
                            Name = "Hobbies",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 27,
                            Description = "",
                            Name = "Reference books",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 28,
                            Description = "",
                            Name = "Encyclopedias",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 29,
                            Description = "",
                            Name = "Reference books",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 30,
                            Description = "",
                            Name = "Educational Literature",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 31,
                            Description = "",
                            Name = "Dictionaries",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 32,
                            Description = "",
                            Name = "Maps",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 33,
                            Description = "",
                            Name = "Atlases",
                            ParentCategoryId = 5
                        });
                });

            modelBuilder.Entity("Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("BookCopyId")
                        .HasColumnType("int");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookCopyId");

                    b.HasIndex("BookId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int");

                    b.Property<int?>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("ShelfId");

                    b.HasIndex("WriterId");

                    b.ToTable("Pictures", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "POWER USER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("Core.Entities.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormattedAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shelves", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowCurrentBooks")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePictureId")
                        .IsUnique()
                        .HasFilter("[ProfilePictureId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2022, 9, 7, 12, 30, 1, 426, DateTimeKind.Local).AddTicks(93),
                            Email = "admin@email.com",
                            FirstName = "Super",
                            IsActive = true,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 215, 253, 87, 78, 105, 249, 149, 78, 220, 197, 15, 189, 250, 201, 144, 99, 130, 48, 5, 136, 205, 54, 29, 102, 187, 50, 226, 102, 192, 101, 157, 147, 215, 57, 218, 253, 85, 151, 158, 66, 1, 205, 4, 199, 214, 230, 78, 213, 137, 19, 60, 187, 129, 208, 135, 82, 212, 121, 212, 123, 239, 69, 161, 200 },
                            PasswordSalt = new byte[] { 42, 198, 28, 10, 31, 182, 193, 58, 239, 95, 154, 107, 190, 167, 216, 228, 137, 21, 201, 8, 208, 220, 242, 33, 159, 126, 169, 74, 163, 76, 240, 109, 23, 31, 231, 209, 176, 63, 52, 72, 30, 54, 66, 146, 3, 251, 157, 84, 168, 74, 24, 158, 11, 206, 147, 130, 204, 195, 1, 150, 159, 22, 144, 164, 127, 115, 168, 56, 166, 204, 51, 136, 64, 140, 29, 171, 201, 26, 197, 120, 161, 54, 5, 92, 3, 155, 244, 144, 2, 164, 100, 207, 116, 51, 104, 214, 32, 66, 55, 163, 89, 19, 227, 158, 11, 117, 9, 119, 110, 10, 116, 169, 162, 172, 188, 222, 111, 116, 103, 137, 95, 100, 39, 10, 133, 254, 174, 178 },
                            RoleId = 1,
                            ShowCurrentBooks = true
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2022, 9, 7, 12, 30, 1, 426, DateTimeKind.Local).AddTicks(156),
                            Email = "powerUser@email.com",
                            FirstName = "Power",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = new byte[] { 101, 8, 171, 14, 15, 246, 196, 243, 135, 91, 224, 193, 155, 34, 194, 115, 192, 229, 78, 252, 137, 150, 101, 38, 3, 111, 139, 241, 247, 132, 12, 143, 18, 65, 179, 153, 90, 142, 214, 100, 146, 50, 25, 6, 108, 186, 152, 114, 227, 134, 76, 118, 36, 38, 51, 58, 176, 238, 15, 25, 254, 14, 225, 172 },
                            PasswordSalt = new byte[] { 57, 10, 28, 7, 17, 69, 57, 146, 4, 133, 59, 161, 47, 254, 96, 102, 184, 233, 86, 184, 241, 209, 58, 224, 239, 194, 47, 45, 233, 168, 91, 33, 136, 212, 2, 4, 169, 211, 19, 227, 96, 112, 35, 140, 167, 9, 175, 133, 139, 99, 238, 152, 147, 151, 20, 44, 143, 129, 20, 204, 64, 62, 52, 102, 175, 157, 185, 20, 193, 192, 175, 181, 92, 189, 81, 49, 12, 48, 46, 176, 139, 74, 50, 193, 67, 138, 124, 139, 140, 75, 234, 178, 217, 167, 18, 237, 85, 11, 205, 148, 133, 53, 6, 22, 163, 165, 65, 69, 61, 180, 135, 177, 232, 213, 53, 163, 238, 125, 140, 66, 9, 250, 105, 134, 112, 64, 105, 180 },
                            RoleId = 2,
                            ShowCurrentBooks = true
                        });
                });

            modelBuilder.Entity("Core.Entities.Writer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Writers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Book", b =>
                {
                    b.HasOne("Core.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Core.Entities.BookCategory", b =>
                {
                    b.HasOne("Core.Entities.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Entities.BookCopy", b =>
                {
                    b.HasOne("Core.Entities.Book", "Book")
                        .WithMany("BookCopies")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Shelf", "CurrentShelf")
                        .WithMany("Books")
                        .HasForeignKey("CurrentShelfId");

                    b.HasOne("Core.Entities.User", "CurrentUser")
                        .WithMany("CurrentBooks")
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("Book");

                    b.Navigation("CurrentShelf");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("Core.Entities.BookWriter", b =>
                {
                    b.HasOne("Core.Entities.Book", "Book")
                        .WithMany("BookWriters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Writer", "Writer")
                        .WithMany("BookWriters")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.HasOne("Core.Entities.Category", "PrentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PrentCategory");
                });

            modelBuilder.Entity("Core.Entities.Comment", b =>
                {
                    b.HasOne("Core.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.BookCopy", "BookCopy")
                        .WithMany("Comments")
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Shelf", "Shelf")
                        .WithMany("Comments")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("BookCopy");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Core.Entities.Picture", b =>
                {
                    b.HasOne("Core.Entities.Book", "Book")
                        .WithMany("Pictures")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Publisher", "Publisher")
                        .WithMany("Pictures")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Shelf", "Shelf")
                        .WithMany("Pictures")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Writer", "Writer")
                        .WithMany("Pictures")
                        .HasForeignKey("WriterId");

                    b.Navigation("Book");

                    b.Navigation("Publisher");

                    b.Navigation("Shelf");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.Picture", "ProfilePicture")
                        .WithOne("User")
                        .HasForeignKey("Core.Entities.User", "ProfilePictureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicture");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Book", b =>
                {
                    b.Navigation("BookCategories");

                    b.Navigation("BookCopies");

                    b.Navigation("BookWriters");

                    b.Navigation("Comments");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Core.Entities.BookCopy", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Navigation("BookCategories");

                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("Core.Entities.Picture", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Shelf", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Comments");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CurrentBooks");
                });

            modelBuilder.Entity("Core.Entities.Writer", b =>
                {
                    b.Navigation("BookWriters");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
